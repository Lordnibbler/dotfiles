let mapleader = ','
nnoremap ; :
set mouse=a

" Cause I edit this shit a lot
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR>

" Pathogen Setup
filetype off
set hidden
call pathogen#helptags()
call pathogen#runtime_append_all_bundles()

" Ruby support warning suppression
let g:LustyJugglerSuppressRubyWarning = 1
let g:LustyExplorerSuppressRubyWarning = 1

" Tell snipmate to pull it's snippets from a custom directory
let g:snippets_dir = $HOME.'/.vim/snippets/'

set backspace=indent,eol,start
set clipboard=
set guioptions-=T

" Command Line Tab completion
set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.rbc,*.class,.svn,vendor/gems/*

" Status bar
set laststatus=2
set statusline=[%n]\ %<%.99f\ %h%w%m%r%{exists('*CapsLockStatusline')?CapsLockStatusline():''}%y%{exists('*rails#statusline')?rails#statusline():''}%{exists('*fugitive#statusline')?fugitive#statusline():''}%#ErrorMsg#%{exists('*SyntasticStatuslineFlag')?SyntasticStatuslineFlag():''}%*%=%-16(\ %l,%c-%v\ %)%P

" Swap files, how the fuck do they work?
set nobackup
set nowritebackup
set noswapfile
set autowrite
set autoindent  "Auto Indent code - This simply retains indentation level
set nocompatible      " We're running Vim, not Vi!
syntax on             " Enable syntax highlighting
filetype on           " Enable filetype detection
filetype indent on    " Enable filetype-specific indenting
filetype plugin on    " Enable filetype-specific plugins
compiler ruby         " Enable compiler support for ruby

set sts=2
set tabstop=2
set smarttab
set shiftwidth=2
set expandtab
set pastetoggle=<F9>

function! ToggleRelativeNumber()
   if &rnu
      set number
   else
      set rnu
   endif
endfunction
noremap <C-l> :call ToggleRelativeNumber()<CR>

set wrap
set formatoptions=qrn1
inoremap <C-space> <ESC>:
nnoremap <C-Space> :

" Buffer movement
noremap <C-i> :bp<CR>
noremap <C-o> :bn<CR>
noremap <C-b> :LustyJuggler<CR>

inoremap jk <ESC>
nnoremap <C-T> :CommandT<CR>
nnoremap <D-T> :CommandTFlush<CR>
map <Leader>t :CommandT<CR>
map <Leader>v :exec ":w !ruby -c"<CR>
map <Leader>w :%s/\s\+$//e<CR>:update<CR>
nnoremap <Space> <C-d>

" Move lines up and down
map <C-J> :m +1 <CR>
map <C-K> :m -2 <CR>

" Add the ability to send yanks back to system clipboard
" Port forward 2224 in ssh and get this working in remote vim sessions
vmap <silent> <C-y> y<CR><ESC>:call system("nc 127.0.0.1 2224", getreg("\""))<CR>
nmap <silent> <C-y> :y<CR><ESC>:call system("nc 127.0.0.1 2224", getreg("\""))<CR>
set clipboard=
let g:yankring_min_element_length = 2 "Yank ring should ignore 'x' deletes
let g:yankring_history_dir = '$HOME' "Keep that ugly yank ring file someplace normal
let g:yankring_history_file = '.yankring_history' "Keep that ugly yank ring file someplace normal

set background=dark
colorscheme slate

" NERDTree configuration
let NERDTreeIgnore=['\.rbc$', '\~$']
map <Leader>n :NERDTreeToggle<CR>'

" Command-T configuration
let g:CommandTMaxHeight=20

" Display extra whitespace
set list listchars=tab:»·,trail:·
" Display extra whitespace
set list listchars=tab:»·,trail:·

set splitright  "By default, split to the right
set visualbell
set number      "Add line numbers
set ruler       "Display Cursor Position
set title       "Display filename in titlebar

" Searching
set hlsearch
set incsearch
set ignorecase
set smartcase

" <Leader>a is equivalent to ":Ack [word at cursor]"
map <Leader>a :Ack <C-r><C-w>
